name: Shared BitBucket GEI Migration

on:
  workflow_call:
    inputs:
      runner:
        description: 'The type of runner to use'
        required: true
        type: string
      TARGET_ORGANIZATION:
        description: 'The GitHub Enterprise Cloud organization to migrate to'
        required: true
        type: string
      bitbucket-username:
        type: string
      bitbucket-server-url:
        type: string
      bitbucket-ssh-user:
        type: string
      bitbucket-ssh-port:
        type: string
      bitbucket-archive-download-host:
        type: string # optional
      bitbucket-shared-home:
        type: string # optional
      AWS_REGION:
        type: string
      AWS_BUCKET_NAME:
        type: string
      INSTALL_PREREQS:
        description: 'If set to true, installs pre-requisites from apt, pwsh, and bbs2gh'
        type: string
        default: 'true'
    secrets:
      TARGET_ADMIN_TOKEN:
        required: true
      BITBUCKET_PASSWORD:
        required: false
      BITBUCKET_SSH_KEY:
        required: false
      AZURE_STORAGE_CONNECTION_STRING:
        required: false
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false

permissions:
  issues: write
  contents: read

jobs:
  prepare:
    name: Prepare
    runs-on: ${{ inputs.runner }}
    outputs:
      repositories: ${{ steps.json.outputs.repositories }}
      migration-type: ${{ steps.migration-type.outputs.result }}
      parsed-issue: ${{ steps.parse-issue-body.outputs.jsonString }}

    if: github.event_name == 'issue_comment' &&
      (contains(github.event.comment.body, '/run-dry-run-migration') ||
      contains(github.event.comment.body, '/run-production-migration'))

    steps:
      - name: Check out scripts
        uses: actions/checkout@v4

      - name: Parse issue body
        id: parse-issue-body
        uses: stefanbuck/github-issue-parser@v3

      - run: echo $JSON_STRING
        env:
          JSON_STRING: ${{ steps.parse-issue-body.outputs.jsonString }}

      - name: Set migration type
        uses: actions/github-script@v7
        id: migration-type
        with:
          result-encoding: string
          script: |
            return context.payload.comment.body.match('dry-run') ? 'Dry-run' : 'Production'

      - name: Build matrix
        uses: actions/github-script@v7
        id: json
        with:
          script: |
            let repositories = process.env.REPOSITORIES.replace(/\r/g, '').split('\n');
            let json = JSON.stringify(repositories);
            console.log(json);
            core.setOutput('repositories', json);
        env:
          REPOSITORIES: ${{ steps.parse-issue-body.outputs.issueparser_repositories }}

  migrate:
    name: GEI
    runs-on: ${{ inputs.runner }}
    needs: prepare
    strategy:
      matrix: 
        repository: ${{ fromJson(needs.prepare.outputs.repositories) }}
      fail-fast: false
      max-parallel: 15

    # Maximize the timeout to 50,400 minutes (35 days) from the default
    # limit of 360 minutes (6 hours), as migrations can take some time.
    timeout-minutes: 50400

    steps:
      - name: Check out scripts
        uses: actions/checkout@v4

      - name: Install common dependencies
        if: ${{ inputs.INSTALL_PREREQS == 'true' || inputs.INSTALL_PREREQS == '' }}
        run: |
          sudo apt-get update
          sudo apt-get install --yes git unzip curl wget apt-transport-https software-properties-common

      - name: Install bbs2gh
        if: ${{ inputs.INSTALL_PREREQS == 'true' || inputs.INSTALL_PREREQS == '' }}
        run: |
          if [ -z "$(command -v bbs2gh)" ]
          then
            wget https://github.com/github/gh-bbs2gh/releases/latest/download/bbs2gh-linux-amd64
            sudo install --owner root --group root --mode 755 bbs2gh-linux-amd64 /usr/local/bin/bbs2gh
          fi

      - if: runner.debug
        name: bbs2gh version number
        run: bbs2gh --version

      - name: Install PowerShell
        if: ${{ inputs.INSTALL_PREREQS == 'true' || inputs.INSTALL_PREREQS == '' }}
        run: |
          if [ -z "$(command -v pwsh)" ]
          then
            wget "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
            sudo dpkg --install packages-microsoft-prod.deb
            sudo apt-get update
            sudo apt-get install --yes powershell
          fi

      - if: runner.debug
        name: PowerShell version number
        run: pwsh --version

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 16
      - run: |
          npm i octokit@2.1.0 fs
  
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          # the next 2 lines are simply setting this up as a known host so there isn't a prompt
          hostname=$(echo "${{ inputs.bitbucket-server-url }}" | awk -F/ '{print $3}')
          ssh-keyscan -p ${{ inputs.bitbucket-ssh-port }} -H ${hostname} >> ~/.ssh/known_hosts
          echo "${{ secrets.BITBUCKET_SSH_KEY }}" > ~/.ssh/id_rsa.pem
          chmod 600 ~/.ssh/id_rsa.pem

      - name: Migrate repositories
        shell: pwsh
        id: migrate
        run: |
          function Exec {
            param (
              [scriptblock]$ScriptBlock
            )
            & @ScriptBlock
            if ($lastexitcode -ne 0) {
              exit $lastexitcode
            }
          }

          function ExecAndGetMigrationID {
            param (
              [scriptblock]$ScriptBlock
            )
            $MigrationID = Exec $ScriptBlock | ForEach-Object {
              Write-Host $_
              $_
            } | Select-String -Pattern "\(ID: (.+)\)" | ForEach-Object { $_.matches.groups[1] }
            return $MigrationID
          }

          if ("${{ needs.prepare.outputs.migration-type }}" -eq "production") {
            # TODO: if production migration, use API etc. to lock/archive source BitBucket repo
            echo "production migration..."
          }

          $VisibilityValue = $Env:VISIBILITY.ToLower()

          $RepoMigrations = [ordered]@{}
          $RepoSources = $Env:REPOSITORIES.Split("`n")

          if ('${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}' -ne '') {
            $AzureStorageIncludeArg = "--azure-storage-connection-string"
            $AzureStorageIncludeValue = "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}"
          }

          if ('${{ secrets.AWS_ACCESS_KEY_ID }}' -ne '') {
            $AwsAccessKeyIdArg = "--aws-access-key"
            $AwsAccessKeyIdValue = "${{ secrets.AWS_ACCESS_KEY_ID }}"
            $AwsSecretAccessKeyArg = "--aws-secret-key"
            $AwsSecretAccessKeyValue = "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            $AwsRegionArg = "--aws-region"
            $AwsRegionValue = "${{ vars.AWS_REGION }}"
            $AwsBucketArg = "--aws-bucket-name"
            $AwsBucketValue = "${{ vars.AWS_BUCKET_NAME }}"
          }

          if ('${{ inputs.bitbucket-archive-download-host }}' -ne '') {
            $BitBucketDownloadHostArg = "--archive-download-host"
            $BitBucketDownloadHostValue = "${{ inputs.bitbucket-archive-download-host }}"
          }

          if ('${{ inputs.bitbucket-shared-home }}' -ne '') {
            $BitBucketSharedHomeArg = "--bbs-shared-home"
            $BitBucketSharedHomeValue = "${{ inputs.bitbucket-shared-home }}"
          }

          foreach ($Repo in $RepoSources) {
            $Repo = $Repo.Trim()
            Write-Host "Repo: $Repo"

            $Parts = $Repo.Split(",")

            $RepoProject = $Parts[0].Trim()
            $RepoName = $Parts[1].Trim()

            $MigrationID = ExecAndGetMigrationID {
              bbs2gh migrate-repo `
              --bbs-server-url ${{ inputs.bitbucket-server-url }} `
              --bbs-project $RepoProject `
              --bbs-repo $RepoName `
              --github-repo "$RepoProject-$RepoName" `
              --github-org '${{ inputs.TARGET_ORGANIZATION }}' `
              --target-repo-visibility $VisibilityValue `
              --ssh-user ${{ inputs.bitbucket-ssh-user }} `
              --ssh-private-key ~/.ssh/id_rsa.pem `
              --ssh-port ${{ inputs.bitbucket-ssh-port }} `
              $BitBucketDownloadHostArg $BitBucketDownloadHostValue `
              $BitBucketSharedHomeArg $BitBucketSharedHomeValue `
              --no-ssl-verify `
              --verbose `
              $AzureStorageIncludeArg $AzureStorageIncludeValue                                    `
              $ServerIncludeArg $ServerIncludeValue                                                `
              $AwsAccessKeyIdArg $AwsAccessKeyIdValue                                              `
              $AwsSecretAccessKeyArg $AwsSecretAccessKeyValue                                      `
              $AwsRegionArg $AwsRegionValue                                                        `
              $AwsBucketArg $AwsBucketValue                                                        `
              --queue-only
            }

            if (!$null -eq $MigrationID) {
              Write-Host "Queued migration of repository $RepoName with ID $MigrationID"
              $RepoMigrations[$RepoName] = $MigrationID
            }
          }

          if ($RepoMigrations.count -eq 0) {
            Write-Host "No migrations were started. Exiting..."
            exit 1
          }

          Write-Host "Queued $($RepoMigrations.count) migration(s). Waiting for them to complete..."

          foreach ($RepoName in $RepoMigrations.Keys) {
            $MigrationID = $RepoMigrations[$RepoName]
            Write-Host "Waiting for migration of repository $RepoName with ID $MigrationID to complete..."

            bbs2gh wait-for-migration --migration-id $MigrationID
          }

        env:
          GH_PAT: ${{ secrets.TARGET_ADMIN_TOKEN }}
          BBS_USERNAME: ${{ inputs.bitbucket-username }}
          BBS_PASSWORD: ${{ secrets.BITBUCKET_PASSWORD }}
          BBS_SERVER_URL: ${{ inputs.bitbucket-server-url }}
          REPOSITORIES: ${{ matrix.repository }}
          VISIBILITY: ${{ fromJson(needs.prepare.outputs.parsed-issue).target_repository_visibility }}


      - name: Reclaim mannequins
        run: |
          bbs2gh reclaim-mannequin \
            --csv user-mappings-gei.csv \
            --github-org ${{ inputs.TARGET_ORGANIZATION }} \
            --github-pat ${{ secrets.TARGET_ADMIN_TOKEN }} # TODO: Can add --skip-invitation here IF YOU DO NOT WANT TO REQUIRE USERS TO ACCEPT EMAIL REQUEST TO MAP MANNEQUINS

      - name: Write repo migration status
        if: always()
        id: write-status
        run: |
          reponame=$(echo ${{ matrix.repository }} | tr -d '\r' | cut -d ',' -f 2 | tr -d ' ')
          echo "The repo name: $reponame"
          echo "repo-name=$reponame" >> "$GITHUB_OUTPUT" 
          echo "${{ matrix.repository }}; ${{ job.status }}" > ${reponame}.txt

      - name: Upload repo migration status
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: migration-status-${{ steps.write-status.outputs.repo-name }}
          path: ${{ steps.write-status.outputs.repo-name }}.txt
          retention-days: 30

  generate-mannequins:
    name: Get Mannequins
    runs-on: ${{ inputs.RUNNER }}
    needs: [prepare, migrate]
    if: ${{ contains(github.event.comment.body, 'dry-run') && (failure() || success()) }}
    steps:
      - name: Install bbs2gh
        if: ${{ inputs.INSTALL_PREREQS == 'true' || inputs.INSTALL_PREREQS == '' }}
        run: |
          if [ -z "$(command -v bbs2gh)" ]
          then
            wget https://github.com/github/gh-bbs2gh/releases/latest/download/bbs2gh-linux-amd64
            sudo install --owner root --group root --mode 755 bbs2gh-linux-amd64 /usr/local/bin/bbs2gh
          fi

      - if: runner.debug
        name: bbs2gh version number
        run: bbs2gh --version

      - name: Generate user mapping file
        env:
          TARGET_ORGANIZATION: ${{ inputs.TARGET_ORGANIZATION }}
        run: |
          bbs2gh generate-mannequin-csv \
          --output user-mappings-template.csv \
          --github-org ${{ env.TARGET_ORGANIZATION }} \
          --github-pat ${{ secrets.TARGET_ADMIN_TOKEN }}
  
      - name: Upload user mapping file to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: user-mappings-template.csv
          path: ./user-mappings-template.csv
          if-no-files-found: error
          retention-days: 30

  report-failure:
    name: Report Failure
    runs-on: ${{ inputs.runner }}
    needs: [prepare, migrate]
    if: failure()
    steps:
      - uses: actions/download-artifact@v4
        id: download-artifact
        with:
          pattern: migration-status-*
          path: migration-status
          merge-multiple: true
      - name: Get failed repositories
        id: get-failed-repos
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            let failedRepos = [];
            const dir = 'migration-status';

            fs.readdirSync(`./${dir}`).forEach(file => {
              if (path.extname(file) === '.txt') {
                let [repo, status] = fs.readFileSync(`${dir}/${file}`, 'utf-8').split(';');
                console.log(`Repo: ${repo}, Status: ${status}`);
                if (status.trim() !== 'success') {
                  failedRepos.push(repo);
                }
              }
            });

            console.log(`Failed repos: \n${failedRepos.join('\n')}`);
            core.setOutput('failed-repos', failedRepos.join('\n'));

      - name: Report failed migration
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const repositories = `${{ steps.get-failed-repos.outputs.failed-repos }}`;
            let body = `:no_entry: **${{ needs.prepare.outputs.migration-type }} migration failed.** [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})\n`

            if ('${{ steps.download-artifact.conclusion }}' === 'success') {
              body += `\n${repositories.trim().split('\n').length}/${process.env.REPOSITORIES.trim().split('\n').length} repo(s) failed: 
              \`\`\`
              ${{ steps.get-failed-repos.outputs.failed-repos }}
              \`\`\``

              const migrationType = '${{ needs.prepare.outputs.migration-type }}';
              const issueTitle = 'BitBucket+to+GitHub+migration+%5BGEI%5D';
              const issueRepositories = repositories.replace(/\n/g, '%0A');
              if (migrationType === 'Production' && repositories.trim().split('\n').length !== process.env.REPOSITORIES.trim().split('\n').length) {
                body += `\nSince this was a partially successful **${{ needs.prepare.outputs.migration-type }}** run, click [here](${context.payload.repository.html_url}/issues/new?template=bitbucket-server-migration-gei.yml&title=${issueTitle}&repositories=${issueRepositories}&labels=gei-bitbucket,migration) to create a new issue with the failed repo(s).`
              }
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })
        env:
          REPOSITORIES: ${{ fromJson(needs.prepare.outputs.parsed-issue).repositories }}

  report-success:
    name: Report Success
    runs-on: ${{ inputs.runner }}
    needs: [prepare, migrate]
    if: success()
    steps:
      - name: Report successful migration
        uses: actions/github-script@v7
        with:
          script: |
            const body = `:tada: **${{ needs.prepare.outputs.migration-type }} migration succeeded.** [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})`
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })

      - name: Add delete repositories comment
        uses: actions/github-script@v7
        with:
          script: |
            const migrationType = '${{ needs.prepare.outputs.migration-type }}'

            if (migrationType === 'Dry-run') {
              let body = `In order to delete the migrated repositories of the dry-run, add a comment with the following slash command:

              \`\`\`
              /delete-repositories
              \`\`\`
              `

              // remove leading whitespace
              body = body.replace(/  +/g, '')

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body
              })
            }
